// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2023 21:31:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vending_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vending_machine_vlg_sample_tst(
	C,
	choice,
	clk,
	nRST,
	V,
	sampler_tx
);
input  C;
input [2:0] choice;
input  clk;
input  nRST;
input [8:0] V;
output sampler_tx;

reg sample;
time current_time;
always @(C or choice or clk or nRST or V)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vending_machine_vlg_check_tst (
	D,
	E,
	ESTQ,
	P,
	sampler_rx
);
input [2:0] D;
input [8:0] E;
input [8:0] ESTQ;
input [8:0] P;
input sampler_rx;

reg [2:0] D_expected;
reg [8:0] E_expected;
reg [8:0] ESTQ_expected;
reg [8:0] P_expected;

reg [2:0] D_prev;
reg [8:0] E_prev;
reg [8:0] ESTQ_prev;
reg [8:0] P_prev;

reg [2:0] D_expected_prev;
reg [8:0] E_expected_prev;
reg [8:0] ESTQ_expected_prev;
reg [8:0] P_expected_prev;

reg [2:0] last_D_exp;
reg [8:0] last_E_exp;
reg [8:0] last_ESTQ_exp;
reg [8:0] last_P_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	D_prev = D;
	E_prev = E;
	ESTQ_prev = ESTQ;
	P_prev = P;
end

// update expected /o prevs

always @(trigger)
begin
	D_expected_prev = D_expected;
	E_expected_prev = E_expected;
	ESTQ_expected_prev = ESTQ_expected;
	P_expected_prev = P_expected;
end


// expected P[ 8 ]
initial
begin
	P_expected[8] = 1'bX;
end 
// expected P[ 7 ]
initial
begin
	P_expected[7] = 1'bX;
end 
// expected P[ 6 ]
initial
begin
	P_expected[6] = 1'bX;
end 
// expected P[ 5 ]
initial
begin
	P_expected[5] = 1'bX;
end 
// expected P[ 4 ]
initial
begin
	P_expected[4] = 1'bX;
end 
// expected P[ 3 ]
initial
begin
	P_expected[3] = 1'bX;
end 
// expected P[ 2 ]
initial
begin
	P_expected[2] = 1'bX;
end 
// expected P[ 1 ]
initial
begin
	P_expected[1] = 1'bX;
end 
// expected P[ 0 ]
initial
begin
	P_expected[0] = 1'bX;
end 
// expected ESTQ[ 8 ]
initial
begin
	ESTQ_expected[8] = 1'bX;
end 
// expected ESTQ[ 7 ]
initial
begin
	ESTQ_expected[7] = 1'bX;
end 
// expected ESTQ[ 6 ]
initial
begin
	ESTQ_expected[6] = 1'bX;
end 
// expected ESTQ[ 5 ]
initial
begin
	ESTQ_expected[5] = 1'bX;
end 
// expected ESTQ[ 4 ]
initial
begin
	ESTQ_expected[4] = 1'bX;
end 
// expected ESTQ[ 3 ]
initial
begin
	ESTQ_expected[3] = 1'bX;
end 
// expected ESTQ[ 2 ]
initial
begin
	ESTQ_expected[2] = 1'bX;
end 
// expected ESTQ[ 1 ]
initial
begin
	ESTQ_expected[1] = 1'bX;
end 
// expected ESTQ[ 0 ]
initial
begin
	ESTQ_expected[0] = 1'bX;
end 
// expected D[ 2 ]
initial
begin
	D_expected[2] = 1'bX;
end 
// expected D[ 1 ]
initial
begin
	D_expected[1] = 1'bX;
end 
// expected D[ 0 ]
initial
begin
	D_expected[0] = 1'bX;
end 
// expected E[ 8 ]
initial
begin
	E_expected[8] = 1'bX;
end 
// expected E[ 7 ]
initial
begin
	E_expected[7] = 1'bX;
end 
// expected E[ 6 ]
initial
begin
	E_expected[6] = 1'bX;
end 
// expected E[ 5 ]
initial
begin
	E_expected[5] = 1'bX;
end 
// expected E[ 4 ]
initial
begin
	E_expected[4] = 1'bX;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
end 
// generate trigger
always @(D_expected or D or E_expected or E or ESTQ_expected or ESTQ or P_expected or P)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D = %b | expected E = %b | expected ESTQ = %b | expected P = %b | ",D_expected_prev,E_expected_prev,ESTQ_expected_prev,P_expected_prev);
	$display("| real D = %b | real E = %b | real ESTQ = %b | real P = %b | ",D_prev,E_prev,ESTQ_prev,P_prev);
`endif
	if (
		( D_expected_prev[0] !== 1'bx ) && ( D_prev[0] !== D_expected_prev[0] )
		&& ((D_expected_prev[0] !== last_D_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_exp[0] = D_expected_prev[0];
	end
	if (
		( D_expected_prev[1] !== 1'bx ) && ( D_prev[1] !== D_expected_prev[1] )
		&& ((D_expected_prev[1] !== last_D_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_exp[1] = D_expected_prev[1];
	end
	if (
		( D_expected_prev[2] !== 1'bx ) && ( D_prev[2] !== D_expected_prev[2] )
		&& ((D_expected_prev[2] !== last_D_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D_exp[2] = D_expected_prev[2];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end
	if (
		( E_expected_prev[4] !== 1'bx ) && ( E_prev[4] !== E_expected_prev[4] )
		&& ((E_expected_prev[4] !== last_E_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[4] = E_expected_prev[4];
	end
	if (
		( E_expected_prev[5] !== 1'bx ) && ( E_prev[5] !== E_expected_prev[5] )
		&& ((E_expected_prev[5] !== last_E_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[5] = E_expected_prev[5];
	end
	if (
		( E_expected_prev[6] !== 1'bx ) && ( E_prev[6] !== E_expected_prev[6] )
		&& ((E_expected_prev[6] !== last_E_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[6] = E_expected_prev[6];
	end
	if (
		( E_expected_prev[7] !== 1'bx ) && ( E_prev[7] !== E_expected_prev[7] )
		&& ((E_expected_prev[7] !== last_E_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[7] = E_expected_prev[7];
	end
	if (
		( E_expected_prev[8] !== 1'bx ) && ( E_prev[8] !== E_expected_prev[8] )
		&& ((E_expected_prev[8] !== last_E_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[8] = E_expected_prev[8];
	end
	if (
		( ESTQ_expected_prev[0] !== 1'bx ) && ( ESTQ_prev[0] !== ESTQ_expected_prev[0] )
		&& ((ESTQ_expected_prev[0] !== last_ESTQ_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[0] = ESTQ_expected_prev[0];
	end
	if (
		( ESTQ_expected_prev[1] !== 1'bx ) && ( ESTQ_prev[1] !== ESTQ_expected_prev[1] )
		&& ((ESTQ_expected_prev[1] !== last_ESTQ_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[1] = ESTQ_expected_prev[1];
	end
	if (
		( ESTQ_expected_prev[2] !== 1'bx ) && ( ESTQ_prev[2] !== ESTQ_expected_prev[2] )
		&& ((ESTQ_expected_prev[2] !== last_ESTQ_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[2] = ESTQ_expected_prev[2];
	end
	if (
		( ESTQ_expected_prev[3] !== 1'bx ) && ( ESTQ_prev[3] !== ESTQ_expected_prev[3] )
		&& ((ESTQ_expected_prev[3] !== last_ESTQ_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[3] = ESTQ_expected_prev[3];
	end
	if (
		( ESTQ_expected_prev[4] !== 1'bx ) && ( ESTQ_prev[4] !== ESTQ_expected_prev[4] )
		&& ((ESTQ_expected_prev[4] !== last_ESTQ_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[4] = ESTQ_expected_prev[4];
	end
	if (
		( ESTQ_expected_prev[5] !== 1'bx ) && ( ESTQ_prev[5] !== ESTQ_expected_prev[5] )
		&& ((ESTQ_expected_prev[5] !== last_ESTQ_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[5] = ESTQ_expected_prev[5];
	end
	if (
		( ESTQ_expected_prev[6] !== 1'bx ) && ( ESTQ_prev[6] !== ESTQ_expected_prev[6] )
		&& ((ESTQ_expected_prev[6] !== last_ESTQ_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[6] = ESTQ_expected_prev[6];
	end
	if (
		( ESTQ_expected_prev[7] !== 1'bx ) && ( ESTQ_prev[7] !== ESTQ_expected_prev[7] )
		&& ((ESTQ_expected_prev[7] !== last_ESTQ_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[7] = ESTQ_expected_prev[7];
	end
	if (
		( ESTQ_expected_prev[8] !== 1'bx ) && ( ESTQ_prev[8] !== ESTQ_expected_prev[8] )
		&& ((ESTQ_expected_prev[8] !== last_ESTQ_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ_expected_prev);
		$display ("     Real value = %b", ESTQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ESTQ_exp[8] = ESTQ_expected_prev[8];
	end
	if (
		( P_expected_prev[0] !== 1'bx ) && ( P_prev[0] !== P_expected_prev[0] )
		&& ((P_expected_prev[0] !== last_P_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[0] = P_expected_prev[0];
	end
	if (
		( P_expected_prev[1] !== 1'bx ) && ( P_prev[1] !== P_expected_prev[1] )
		&& ((P_expected_prev[1] !== last_P_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[1] = P_expected_prev[1];
	end
	if (
		( P_expected_prev[2] !== 1'bx ) && ( P_prev[2] !== P_expected_prev[2] )
		&& ((P_expected_prev[2] !== last_P_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[2] = P_expected_prev[2];
	end
	if (
		( P_expected_prev[3] !== 1'bx ) && ( P_prev[3] !== P_expected_prev[3] )
		&& ((P_expected_prev[3] !== last_P_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[3] = P_expected_prev[3];
	end
	if (
		( P_expected_prev[4] !== 1'bx ) && ( P_prev[4] !== P_expected_prev[4] )
		&& ((P_expected_prev[4] !== last_P_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[4] = P_expected_prev[4];
	end
	if (
		( P_expected_prev[5] !== 1'bx ) && ( P_prev[5] !== P_expected_prev[5] )
		&& ((P_expected_prev[5] !== last_P_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[5] = P_expected_prev[5];
	end
	if (
		( P_expected_prev[6] !== 1'bx ) && ( P_prev[6] !== P_expected_prev[6] )
		&& ((P_expected_prev[6] !== last_P_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[6] = P_expected_prev[6];
	end
	if (
		( P_expected_prev[7] !== 1'bx ) && ( P_prev[7] !== P_expected_prev[7] )
		&& ((P_expected_prev[7] !== last_P_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[7] = P_expected_prev[7];
	end
	if (
		( P_expected_prev[8] !== 1'bx ) && ( P_prev[8] !== P_expected_prev[8] )
		&& ((P_expected_prev[8] !== last_P_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_P_exp[8] = P_expected_prev[8];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vending_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg [2:0] choice;
reg clk;
reg nRST;
reg [8:0] V;
// wires                                               
wire [2:0] D;
wire [8:0] E;
wire [8:0] ESTQ;
wire [8:0] P;

wire sampler;                             

// assign statements (if any)                          
vending_machine i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.choice(choice),
	.clk(clk),
	.D(D),
	.E(E),
	.ESTQ(ESTQ),
	.nRST(nRST),
	.P(P),
	.V(V)
);

// clk
initial
begin
	clk = 1'b0;
end 

// C
initial
begin
	C = 1'b0;
end 
// V[ 8 ]
initial
begin
	V[8] = 1'b0;
end 
// V[ 7 ]
initial
begin
	V[7] = 1'b0;
end 
// V[ 6 ]
initial
begin
	V[6] = 1'b0;
end 
// V[ 5 ]
initial
begin
	V[5] = 1'b0;
end 
// V[ 4 ]
initial
begin
	V[4] = 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
end 
// choice[ 2 ]
initial
begin
	choice[2] = 1'b0;
end 
// choice[ 1 ]
initial
begin
	choice[1] = 1'b0;
end 
// choice[ 0 ]
initial
begin
	choice[0] = 1'b0;
end 

// nRST
initial
begin
	nRST = 1'b0;
end 

vending_machine_vlg_sample_tst tb_sample (
	.C(C),
	.choice(choice),
	.clk(clk),
	.nRST(nRST),
	.V(V),
	.sampler_tx(sampler)
);

vending_machine_vlg_check_tst tb_out(
	.D(D),
	.E(E),
	.ESTQ(ESTQ),
	.P(P),
	.sampler_rx(sampler)
);
endmodule

