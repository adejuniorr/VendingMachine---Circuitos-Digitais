// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/17/2023 15:00:52"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    vending_machine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module vending_machine_vlg_sample_tst(
	C,
	cancel_purchase,
	choice,
	clk,
	coin_confirm_signal,
	dispense_signal,
	nRST,
	V_input,
	sampler_tx
);
input  C;
input  cancel_purchase;
input [2:0] choice;
input  clk;
input  coin_confirm_signal;
input  dispense_signal;
input  nRST;
input [2:0] V_input;
output sampler_tx;

reg sample;
time current_time;
always @(C or cancel_purchase or choice or clk or coin_confirm_signal or dispense_signal or nRST or V_input)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module vending_machine_vlg_check_tst (
	D1,
	D2,
	D3,
	D4,
	D5,
	E,
	ESTQ1,
	ESTQ2,
	ESTQ3,
	ESTQ4,
	ESTQ5,
	hexDisplay_centena,
	hexDisplay_choice,
	hexDisplay_dezena,
	hexDisplay_unidade,
	P,
	sampler_rx
);
input [2:0] D1;
input [2:0] D2;
input [2:0] D3;
input [2:0] D4;
input [2:0] D5;
input [8:0] E;
input [8:0] ESTQ1;
input [8:0] ESTQ2;
input [8:0] ESTQ3;
input [8:0] ESTQ4;
input [8:0] ESTQ5;
input [6:0] hexDisplay_centena;
input [6:0] hexDisplay_choice;
input [6:0] hexDisplay_dezena;
input [6:0] hexDisplay_unidade;
input [8:0] P;
input sampler_rx;

reg [2:0] D1_expected;
reg [2:0] D2_expected;
reg [2:0] D3_expected;
reg [2:0] D4_expected;
reg [2:0] D5_expected;
reg [8:0] E_expected;
reg [8:0] ESTQ1_expected;
reg [8:0] ESTQ2_expected;
reg [8:0] ESTQ3_expected;
reg [8:0] ESTQ4_expected;
reg [8:0] ESTQ5_expected;
reg [6:0] hexDisplay_centena_expected;
reg [6:0] hexDisplay_choice_expected;
reg [6:0] hexDisplay_dezena_expected;
reg [6:0] hexDisplay_unidade_expected;
reg [8:0] P_expected;

reg [2:0] D1_prev;
reg [2:0] D2_prev;
reg [2:0] D3_prev;
reg [2:0] D4_prev;
reg [2:0] D5_prev;
reg [8:0] E_prev;
reg [8:0] ESTQ1_prev;
reg [8:0] ESTQ2_prev;
reg [8:0] ESTQ3_prev;
reg [8:0] ESTQ4_prev;
reg [8:0] ESTQ5_prev;
reg [6:0] hexDisplay_centena_prev;
reg [6:0] hexDisplay_choice_prev;
reg [6:0] hexDisplay_dezena_prev;
reg [6:0] hexDisplay_unidade_prev;
reg [8:0] P_prev;

reg [2:0] D1_expected_prev;
reg [2:0] D2_expected_prev;
reg [2:0] D3_expected_prev;
reg [2:0] D4_expected_prev;
reg [2:0] D5_expected_prev;
reg [8:0] E_expected_prev;
reg [8:0] ESTQ1_expected_prev;
reg [8:0] ESTQ2_expected_prev;
reg [8:0] ESTQ3_expected_prev;
reg [8:0] ESTQ4_expected_prev;
reg [8:0] ESTQ5_expected_prev;
reg [6:0] hexDisplay_centena_expected_prev;
reg [6:0] hexDisplay_choice_expected_prev;
reg [6:0] hexDisplay_dezena_expected_prev;
reg [6:0] hexDisplay_unidade_expected_prev;
reg [8:0] P_expected_prev;

reg [2:0] last_D1_exp;
reg [2:0] last_D2_exp;
reg [2:0] last_D3_exp;
reg [2:0] last_D4_exp;
reg [2:0] last_D5_exp;
reg [8:0] last_E_exp;
reg [8:0] last_ESTQ1_exp;
reg [8:0] last_ESTQ2_exp;
reg [8:0] last_ESTQ3_exp;
reg [8:0] last_ESTQ4_exp;
reg [8:0] last_ESTQ5_exp;
reg [6:0] last_hexDisplay_centena_exp;
reg [6:0] last_hexDisplay_choice_exp;
reg [6:0] last_hexDisplay_dezena_exp;
reg [6:0] last_hexDisplay_unidade_exp;
reg [8:0] last_P_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	E_prev = E;
	ESTQ1_prev = ESTQ1;
	ESTQ2_prev = ESTQ2;
	ESTQ3_prev = ESTQ3;
	ESTQ4_prev = ESTQ4;
	ESTQ5_prev = ESTQ5;
	hexDisplay_centena_prev = hexDisplay_centena;
	hexDisplay_choice_prev = hexDisplay_choice;
	hexDisplay_dezena_prev = hexDisplay_dezena;
	hexDisplay_unidade_prev = hexDisplay_unidade;
	P_prev = P;
end

// update expected /o prevs

always @(trigger)
begin
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	E_expected_prev = E_expected;
	ESTQ1_expected_prev = ESTQ1_expected;
	ESTQ2_expected_prev = ESTQ2_expected;
	ESTQ3_expected_prev = ESTQ3_expected;
	ESTQ4_expected_prev = ESTQ4_expected;
	ESTQ5_expected_prev = ESTQ5_expected;
	hexDisplay_centena_expected_prev = hexDisplay_centena_expected;
	hexDisplay_choice_expected_prev = hexDisplay_choice_expected;
	hexDisplay_dezena_expected_prev = hexDisplay_dezena_expected;
	hexDisplay_unidade_expected_prev = hexDisplay_unidade_expected;
	P_expected_prev = P_expected;
end


// expected hexDisplay_choice[ 6 ]
initial
begin
	hexDisplay_choice_expected[6] = 1'bX;
end 
// expected hexDisplay_choice[ 5 ]
initial
begin
	hexDisplay_choice_expected[5] = 1'bX;
end 
// expected hexDisplay_choice[ 4 ]
initial
begin
	hexDisplay_choice_expected[4] = 1'bX;
end 
// expected hexDisplay_choice[ 3 ]
initial
begin
	hexDisplay_choice_expected[3] = 1'bX;
end 
// expected hexDisplay_choice[ 2 ]
initial
begin
	hexDisplay_choice_expected[2] = 1'bX;
end 
// expected hexDisplay_choice[ 1 ]
initial
begin
	hexDisplay_choice_expected[1] = 1'bX;
end 
// expected hexDisplay_choice[ 0 ]
initial
begin
	hexDisplay_choice_expected[0] = 1'bX;
end 
// expected hexDisplay_centena[ 6 ]
initial
begin
	hexDisplay_centena_expected[6] = 1'bX;
end 
// expected hexDisplay_centena[ 5 ]
initial
begin
	hexDisplay_centena_expected[5] = 1'bX;
end 
// expected hexDisplay_centena[ 4 ]
initial
begin
	hexDisplay_centena_expected[4] = 1'bX;
end 
// expected hexDisplay_centena[ 3 ]
initial
begin
	hexDisplay_centena_expected[3] = 1'bX;
end 
// expected hexDisplay_centena[ 2 ]
initial
begin
	hexDisplay_centena_expected[2] = 1'bX;
end 
// expected hexDisplay_centena[ 1 ]
initial
begin
	hexDisplay_centena_expected[1] = 1'bX;
end 
// expected hexDisplay_centena[ 0 ]
initial
begin
	hexDisplay_centena_expected[0] = 1'bX;
end 
// expected hexDisplay_dezena[ 6 ]
initial
begin
	hexDisplay_dezena_expected[6] = 1'bX;
end 
// expected hexDisplay_dezena[ 5 ]
initial
begin
	hexDisplay_dezena_expected[5] = 1'bX;
end 
// expected hexDisplay_dezena[ 4 ]
initial
begin
	hexDisplay_dezena_expected[4] = 1'bX;
end 
// expected hexDisplay_dezena[ 3 ]
initial
begin
	hexDisplay_dezena_expected[3] = 1'bX;
end 
// expected hexDisplay_dezena[ 2 ]
initial
begin
	hexDisplay_dezena_expected[2] = 1'bX;
end 
// expected hexDisplay_dezena[ 1 ]
initial
begin
	hexDisplay_dezena_expected[1] = 1'bX;
end 
// expected hexDisplay_dezena[ 0 ]
initial
begin
	hexDisplay_dezena_expected[0] = 1'bX;
end 
// expected hexDisplay_unidade[ 6 ]
initial
begin
	hexDisplay_unidade_expected[6] = 1'bX;
end 
// expected hexDisplay_unidade[ 5 ]
initial
begin
	hexDisplay_unidade_expected[5] = 1'bX;
end 
// expected hexDisplay_unidade[ 4 ]
initial
begin
	hexDisplay_unidade_expected[4] = 1'bX;
end 
// expected hexDisplay_unidade[ 3 ]
initial
begin
	hexDisplay_unidade_expected[3] = 1'bX;
end 
// expected hexDisplay_unidade[ 2 ]
initial
begin
	hexDisplay_unidade_expected[2] = 1'bX;
end 
// expected hexDisplay_unidade[ 1 ]
initial
begin
	hexDisplay_unidade_expected[1] = 1'bX;
end 
// expected hexDisplay_unidade[ 0 ]
initial
begin
	hexDisplay_unidade_expected[0] = 1'bX;
end 

// expected E[8]
initial
begin
	E_expected[8] = 1'bX;
	E_expected[8] = #9999000 1'b0;
	E_expected[8] = #4401000 1'bX;
	E_expected[8] = #10560000 1'b0;
end 

// expected E[7]
initial
begin
	E_expected[7] = 1'bX;
	E_expected[7] = #999000 1'b0;
	E_expected[7] = #13401000 1'bX;
	E_expected[7] = #10560000 1'b0;
end 

// expected E[6]
initial
begin
	E_expected[6] = 1'bX;
	E_expected[6] = #999000 1'b0;
	E_expected[6] = #13401000 1'bX;
	E_expected[6] = #10560000 1'b0;
end 

// expected E[5]
initial
begin
	E_expected[5] = 1'bX;
	E_expected[5] = #999000 1'b0;
	E_expected[5] = #13401000 1'bX;
	E_expected[5] = #10560000 1'b0;
end 

// expected E[4]
initial
begin
	E_expected[4] = 1'bX;
	E_expected[4] = #999000 1'b0;
	E_expected[4] = #13401000 1'bX;
	E_expected[4] = #10560000 1'b0;
end 

// expected E[3]
initial
begin
	E_expected[3] = 1'bX;
	E_expected[3] = #999000 1'b0;
	E_expected[3] = #13401000 1'bX;
	E_expected[3] = #10560000 1'b0;
end 

// expected E[2]
initial
begin
	E_expected[2] = 1'bX;
	E_expected[2] = #999000 1'b0;
	E_expected[2] = #13401000 1'bX;
	E_expected[2] = #10560000 1'b0;
end 

// expected E[1]
initial
begin
	E_expected[1] = 1'bX;
	E_expected[1] = #999000 1'b0;
	E_expected[1] = #13401000 1'bX;
	E_expected[1] = #10560000 1'b0;
end 

// expected E[0]
initial
begin
	E_expected[0] = 1'bX;
	E_expected[0] = #999000 1'b0;
	E_expected[0] = #13401000 1'bX;
	E_expected[0] = #10560000 1'b0;
end 

// expected P[8]
initial
begin
	P_expected[8] = 1'bX;
	P_expected[8] = #9999000 1'b0;
	P_expected[8] = #4401000 1'bX;
	P_expected[8] = #10560000 1'b0;
end 

// expected P[7]
initial
begin
	P_expected[7] = 1'bX;
	P_expected[7] = #999000 1'b0;
	P_expected[7] = #13401000 1'bX;
	P_expected[7] = #10560000 1'b0;
end 

// expected P[6]
initial
begin
	P_expected[6] = 1'bX;
	P_expected[6] = #999000 1'b0;
	P_expected[6] = #13401000 1'bX;
	P_expected[6] = #10560000 1'b0;
end 

// expected P[5]
initial
begin
	P_expected[5] = 1'bX;
	P_expected[5] = #999000 1'b0;
	P_expected[5] = #13401000 1'bX;
	P_expected[5] = #10560000 1'b0;
end 

// expected P[4]
initial
begin
	P_expected[4] = 1'bX;
	P_expected[4] = #999000 1'b0;
	P_expected[4] = #13401000 1'bX;
	P_expected[4] = #10560000 1'b0;
end 

// expected P[3]
initial
begin
	P_expected[3] = 1'bX;
	P_expected[3] = #999000 1'b0;
	P_expected[3] = #13401000 1'bX;
	P_expected[3] = #10560000 1'b0;
end 

// expected P[2]
initial
begin
	P_expected[2] = 1'bX;
	P_expected[2] = #999000 1'b0;
	P_expected[2] = #13401000 1'bX;
	P_expected[2] = #10560000 1'b0;
end 

// expected P[1]
initial
begin
	P_expected[1] = 1'bX;
	P_expected[1] = #999000 1'b0;
	P_expected[1] = #13401000 1'bX;
	P_expected[1] = #10560000 1'b0;
end 

// expected P[0]
initial
begin
	P_expected[0] = 1'bX;
	P_expected[0] = #999000 1'b0;
	P_expected[0] = #13401000 1'bX;
	P_expected[0] = #10560000 1'b0;
end 
// expected D1[ 2 ]
initial
begin
	D1_expected[2] = 1'bX;
end 
// expected D1[ 1 ]
initial
begin
	D1_expected[1] = 1'bX;
end 
// expected D1[ 0 ]
initial
begin
	D1_expected[0] = 1'bX;
end 
// expected D2[ 2 ]
initial
begin
	D2_expected[2] = 1'bX;
end 
// expected D2[ 1 ]
initial
begin
	D2_expected[1] = 1'bX;
end 
// expected D2[ 0 ]
initial
begin
	D2_expected[0] = 1'bX;
end 
// expected D3[ 2 ]
initial
begin
	D3_expected[2] = 1'bX;
end 
// expected D3[ 1 ]
initial
begin
	D3_expected[1] = 1'bX;
end 
// expected D3[ 0 ]
initial
begin
	D3_expected[0] = 1'bX;
end 
// expected D4[ 2 ]
initial
begin
	D4_expected[2] = 1'bX;
end 
// expected D4[ 1 ]
initial
begin
	D4_expected[1] = 1'bX;
end 
// expected D4[ 0 ]
initial
begin
	D4_expected[0] = 1'bX;
end 
// expected D5[ 2 ]
initial
begin
	D5_expected[2] = 1'bX;
end 
// expected D5[ 1 ]
initial
begin
	D5_expected[1] = 1'bX;
end 
// expected D5[ 0 ]
initial
begin
	D5_expected[0] = 1'bX;
end 
// expected ESTQ1[ 8 ]
initial
begin
	ESTQ1_expected[8] = 1'bX;
end 
// expected ESTQ1[ 7 ]
initial
begin
	ESTQ1_expected[7] = 1'bX;
end 
// expected ESTQ1[ 6 ]
initial
begin
	ESTQ1_expected[6] = 1'bX;
end 
// expected ESTQ1[ 5 ]
initial
begin
	ESTQ1_expected[5] = 1'bX;
end 
// expected ESTQ1[ 4 ]
initial
begin
	ESTQ1_expected[4] = 1'bX;
end 
// expected ESTQ1[ 3 ]
initial
begin
	ESTQ1_expected[3] = 1'bX;
end 
// expected ESTQ1[ 2 ]
initial
begin
	ESTQ1_expected[2] = 1'bX;
end 
// expected ESTQ1[ 1 ]
initial
begin
	ESTQ1_expected[1] = 1'bX;
end 
// expected ESTQ1[ 0 ]
initial
begin
	ESTQ1_expected[0] = 1'bX;
end 
// expected ESTQ2[ 8 ]
initial
begin
	ESTQ2_expected[8] = 1'bX;
end 
// expected ESTQ2[ 7 ]
initial
begin
	ESTQ2_expected[7] = 1'bX;
end 
// expected ESTQ2[ 6 ]
initial
begin
	ESTQ2_expected[6] = 1'bX;
end 
// expected ESTQ2[ 5 ]
initial
begin
	ESTQ2_expected[5] = 1'bX;
end 
// expected ESTQ2[ 4 ]
initial
begin
	ESTQ2_expected[4] = 1'bX;
end 
// expected ESTQ2[ 3 ]
initial
begin
	ESTQ2_expected[3] = 1'bX;
end 
// expected ESTQ2[ 2 ]
initial
begin
	ESTQ2_expected[2] = 1'bX;
end 
// expected ESTQ2[ 1 ]
initial
begin
	ESTQ2_expected[1] = 1'bX;
end 
// expected ESTQ2[ 0 ]
initial
begin
	ESTQ2_expected[0] = 1'bX;
end 
// expected ESTQ3[ 8 ]
initial
begin
	ESTQ3_expected[8] = 1'bX;
end 
// expected ESTQ3[ 7 ]
initial
begin
	ESTQ3_expected[7] = 1'bX;
end 
// expected ESTQ3[ 6 ]
initial
begin
	ESTQ3_expected[6] = 1'bX;
end 
// expected ESTQ3[ 5 ]
initial
begin
	ESTQ3_expected[5] = 1'bX;
end 
// expected ESTQ3[ 4 ]
initial
begin
	ESTQ3_expected[4] = 1'bX;
end 
// expected ESTQ3[ 3 ]
initial
begin
	ESTQ3_expected[3] = 1'bX;
end 
// expected ESTQ3[ 2 ]
initial
begin
	ESTQ3_expected[2] = 1'bX;
end 
// expected ESTQ3[ 1 ]
initial
begin
	ESTQ3_expected[1] = 1'bX;
end 
// expected ESTQ3[ 0 ]
initial
begin
	ESTQ3_expected[0] = 1'bX;
end 
// expected ESTQ4[ 8 ]
initial
begin
	ESTQ4_expected[8] = 1'bX;
end 
// expected ESTQ4[ 7 ]
initial
begin
	ESTQ4_expected[7] = 1'bX;
end 
// expected ESTQ4[ 6 ]
initial
begin
	ESTQ4_expected[6] = 1'bX;
end 
// expected ESTQ4[ 5 ]
initial
begin
	ESTQ4_expected[5] = 1'bX;
end 
// expected ESTQ4[ 4 ]
initial
begin
	ESTQ4_expected[4] = 1'bX;
end 
// expected ESTQ4[ 3 ]
initial
begin
	ESTQ4_expected[3] = 1'bX;
end 
// expected ESTQ4[ 2 ]
initial
begin
	ESTQ4_expected[2] = 1'bX;
end 
// expected ESTQ4[ 1 ]
initial
begin
	ESTQ4_expected[1] = 1'bX;
end 
// expected ESTQ4[ 0 ]
initial
begin
	ESTQ4_expected[0] = 1'bX;
end 
// expected ESTQ5[ 8 ]
initial
begin
	ESTQ5_expected[8] = 1'bX;
end 
// expected ESTQ5[ 7 ]
initial
begin
	ESTQ5_expected[7] = 1'bX;
end 
// expected ESTQ5[ 6 ]
initial
begin
	ESTQ5_expected[6] = 1'bX;
end 
// expected ESTQ5[ 5 ]
initial
begin
	ESTQ5_expected[5] = 1'bX;
end 
// expected ESTQ5[ 4 ]
initial
begin
	ESTQ5_expected[4] = 1'bX;
end 
// expected ESTQ5[ 3 ]
initial
begin
	ESTQ5_expected[3] = 1'bX;
end 
// expected ESTQ5[ 2 ]
initial
begin
	ESTQ5_expected[2] = 1'bX;
end 
// expected ESTQ5[ 1 ]
initial
begin
	ESTQ5_expected[1] = 1'bX;
end 
// expected ESTQ5[ 0 ]
initial
begin
	ESTQ5_expected[0] = 1'bX;
end 
// generate trigger
always @(D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or E_expected or E or ESTQ1_expected or ESTQ1 or ESTQ2_expected or ESTQ2 or ESTQ3_expected or ESTQ3 or ESTQ4_expected or ESTQ4 or ESTQ5_expected or ESTQ5 or hexDisplay_centena_expected or hexDisplay_centena or hexDisplay_choice_expected or hexDisplay_choice or hexDisplay_dezena_expected or hexDisplay_dezena or hexDisplay_unidade_expected or hexDisplay_unidade or P_expected or P)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected E = %b | expected ESTQ1 = %b | expected ESTQ2 = %b | expected ESTQ3 = %b | expected ESTQ4 = %b | expected ESTQ5 = %b | expected hexDisplay_centena = %b | expected hexDisplay_choice = %b | expected hexDisplay_dezena = %b | expected hexDisplay_unidade = %b | expected P = %b | ",D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,E_expected_prev,ESTQ1_expected_prev,ESTQ2_expected_prev,ESTQ3_expected_prev,ESTQ4_expected_prev,ESTQ5_expected_prev,hexDisplay_centena_expected_prev,hexDisplay_choice_expected_prev,hexDisplay_dezena_expected_prev,hexDisplay_unidade_expected_prev,P_expected_prev);
	$display("| real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real E = %b | real ESTQ1 = %b | real ESTQ2 = %b | real ESTQ3 = %b | real ESTQ4 = %b | real ESTQ5 = %b | real hexDisplay_centena = %b | real hexDisplay_choice = %b | real hexDisplay_dezena = %b | real hexDisplay_unidade = %b | real P = %b | ",D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,E_prev,ESTQ1_prev,ESTQ2_prev,ESTQ3_prev,ESTQ4_prev,ESTQ5_prev,hexDisplay_centena_prev,hexDisplay_choice_prev,hexDisplay_dezena_prev,hexDisplay_unidade_prev,P_prev);
`endif
	if (
		( D1_expected_prev[0] !== 1'bx ) && ( D1_prev[0] !== D1_expected_prev[0] )
		&& ((D1_expected_prev[0] !== last_D1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[0] = D1_expected_prev[0];
	end
	if (
		( D1_expected_prev[1] !== 1'bx ) && ( D1_prev[1] !== D1_expected_prev[1] )
		&& ((D1_expected_prev[1] !== last_D1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[1] = D1_expected_prev[1];
	end
	if (
		( D1_expected_prev[2] !== 1'bx ) && ( D1_prev[2] !== D1_expected_prev[2] )
		&& ((D1_expected_prev[2] !== last_D1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D1_exp[2] = D1_expected_prev[2];
	end
	if (
		( D2_expected_prev[0] !== 1'bx ) && ( D2_prev[0] !== D2_expected_prev[0] )
		&& ((D2_expected_prev[0] !== last_D2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[0] = D2_expected_prev[0];
	end
	if (
		( D2_expected_prev[1] !== 1'bx ) && ( D2_prev[1] !== D2_expected_prev[1] )
		&& ((D2_expected_prev[1] !== last_D2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[1] = D2_expected_prev[1];
	end
	if (
		( D2_expected_prev[2] !== 1'bx ) && ( D2_prev[2] !== D2_expected_prev[2] )
		&& ((D2_expected_prev[2] !== last_D2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D2_exp[2] = D2_expected_prev[2];
	end
	if (
		( D3_expected_prev[0] !== 1'bx ) && ( D3_prev[0] !== D3_expected_prev[0] )
		&& ((D3_expected_prev[0] !== last_D3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[0] = D3_expected_prev[0];
	end
	if (
		( D3_expected_prev[1] !== 1'bx ) && ( D3_prev[1] !== D3_expected_prev[1] )
		&& ((D3_expected_prev[1] !== last_D3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[1] = D3_expected_prev[1];
	end
	if (
		( D3_expected_prev[2] !== 1'bx ) && ( D3_prev[2] !== D3_expected_prev[2] )
		&& ((D3_expected_prev[2] !== last_D3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D3_exp[2] = D3_expected_prev[2];
	end
	if (
		( D4_expected_prev[0] !== 1'bx ) && ( D4_prev[0] !== D4_expected_prev[0] )
		&& ((D4_expected_prev[0] !== last_D4_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[0] = D4_expected_prev[0];
	end
	if (
		( D4_expected_prev[1] !== 1'bx ) && ( D4_prev[1] !== D4_expected_prev[1] )
		&& ((D4_expected_prev[1] !== last_D4_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[1] = D4_expected_prev[1];
	end
	if (
		( D4_expected_prev[2] !== 1'bx ) && ( D4_prev[2] !== D4_expected_prev[2] )
		&& ((D4_expected_prev[2] !== last_D4_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D4_exp[2] = D4_expected_prev[2];
	end
	if (
		( D5_expected_prev[0] !== 1'bx ) && ( D5_prev[0] !== D5_expected_prev[0] )
		&& ((D5_expected_prev[0] !== last_D5_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D5_exp[0] = D5_expected_prev[0];
	end
	if (
		( D5_expected_prev[1] !== 1'bx ) && ( D5_prev[1] !== D5_expected_prev[1] )
		&& ((D5_expected_prev[1] !== last_D5_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D5_exp[1] = D5_expected_prev[1];
	end
	if (
		( D5_expected_prev[2] !== 1'bx ) && ( D5_prev[2] !== D5_expected_prev[2] )
		&& ((D5_expected_prev[2] !== last_D5_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D5_exp[2] = D5_expected_prev[2];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end
	if (
		( E_expected_prev[4] !== 1'bx ) && ( E_prev[4] !== E_expected_prev[4] )
		&& ((E_expected_prev[4] !== last_E_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[4] = E_expected_prev[4];
	end
	if (
		( E_expected_prev[5] !== 1'bx ) && ( E_prev[5] !== E_expected_prev[5] )
		&& ((E_expected_prev[5] !== last_E_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[5] = E_expected_prev[5];
	end
	if (
		( E_expected_prev[6] !== 1'bx ) && ( E_prev[6] !== E_expected_prev[6] )
		&& ((E_expected_prev[6] !== last_E_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[6] = E_expected_prev[6];
	end
	if (
		( E_expected_prev[7] !== 1'bx ) && ( E_prev[7] !== E_expected_prev[7] )
		&& ((E_expected_prev[7] !== last_E_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[7] = E_expected_prev[7];
	end
	if (
		( E_expected_prev[8] !== 1'bx ) && ( E_prev[8] !== E_expected_prev[8] )
		&& ((E_expected_prev[8] !== last_E_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp[8] = E_expected_prev[8];
	end
	if (
		( ESTQ1_expected_prev[0] !== 1'bx ) && ( ESTQ1_prev[0] !== ESTQ1_expected_prev[0] )
		&& ((ESTQ1_expected_prev[0] !== last_ESTQ1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[0] = ESTQ1_expected_prev[0];
	end
	if (
		( ESTQ1_expected_prev[1] !== 1'bx ) && ( ESTQ1_prev[1] !== ESTQ1_expected_prev[1] )
		&& ((ESTQ1_expected_prev[1] !== last_ESTQ1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[1] = ESTQ1_expected_prev[1];
	end
	if (
		( ESTQ1_expected_prev[2] !== 1'bx ) && ( ESTQ1_prev[2] !== ESTQ1_expected_prev[2] )
		&& ((ESTQ1_expected_prev[2] !== last_ESTQ1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[2] = ESTQ1_expected_prev[2];
	end
	if (
		( ESTQ1_expected_prev[3] !== 1'bx ) && ( ESTQ1_prev[3] !== ESTQ1_expected_prev[3] )
		&& ((ESTQ1_expected_prev[3] !== last_ESTQ1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[3] = ESTQ1_expected_prev[3];
	end
	if (
		( ESTQ1_expected_prev[4] !== 1'bx ) && ( ESTQ1_prev[4] !== ESTQ1_expected_prev[4] )
		&& ((ESTQ1_expected_prev[4] !== last_ESTQ1_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[4] = ESTQ1_expected_prev[4];
	end
	if (
		( ESTQ1_expected_prev[5] !== 1'bx ) && ( ESTQ1_prev[5] !== ESTQ1_expected_prev[5] )
		&& ((ESTQ1_expected_prev[5] !== last_ESTQ1_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[5] = ESTQ1_expected_prev[5];
	end
	if (
		( ESTQ1_expected_prev[6] !== 1'bx ) && ( ESTQ1_prev[6] !== ESTQ1_expected_prev[6] )
		&& ((ESTQ1_expected_prev[6] !== last_ESTQ1_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[6] = ESTQ1_expected_prev[6];
	end
	if (
		( ESTQ1_expected_prev[7] !== 1'bx ) && ( ESTQ1_prev[7] !== ESTQ1_expected_prev[7] )
		&& ((ESTQ1_expected_prev[7] !== last_ESTQ1_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[7] = ESTQ1_expected_prev[7];
	end
	if (
		( ESTQ1_expected_prev[8] !== 1'bx ) && ( ESTQ1_prev[8] !== ESTQ1_expected_prev[8] )
		&& ((ESTQ1_expected_prev[8] !== last_ESTQ1_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ1_expected_prev);
		$display ("     Real value = %b", ESTQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ESTQ1_exp[8] = ESTQ1_expected_prev[8];
	end
	if (
		( ESTQ2_expected_prev[0] !== 1'bx ) && ( ESTQ2_prev[0] !== ESTQ2_expected_prev[0] )
		&& ((ESTQ2_expected_prev[0] !== last_ESTQ2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[0] = ESTQ2_expected_prev[0];
	end
	if (
		( ESTQ2_expected_prev[1] !== 1'bx ) && ( ESTQ2_prev[1] !== ESTQ2_expected_prev[1] )
		&& ((ESTQ2_expected_prev[1] !== last_ESTQ2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[1] = ESTQ2_expected_prev[1];
	end
	if (
		( ESTQ2_expected_prev[2] !== 1'bx ) && ( ESTQ2_prev[2] !== ESTQ2_expected_prev[2] )
		&& ((ESTQ2_expected_prev[2] !== last_ESTQ2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[2] = ESTQ2_expected_prev[2];
	end
	if (
		( ESTQ2_expected_prev[3] !== 1'bx ) && ( ESTQ2_prev[3] !== ESTQ2_expected_prev[3] )
		&& ((ESTQ2_expected_prev[3] !== last_ESTQ2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[3] = ESTQ2_expected_prev[3];
	end
	if (
		( ESTQ2_expected_prev[4] !== 1'bx ) && ( ESTQ2_prev[4] !== ESTQ2_expected_prev[4] )
		&& ((ESTQ2_expected_prev[4] !== last_ESTQ2_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[4] = ESTQ2_expected_prev[4];
	end
	if (
		( ESTQ2_expected_prev[5] !== 1'bx ) && ( ESTQ2_prev[5] !== ESTQ2_expected_prev[5] )
		&& ((ESTQ2_expected_prev[5] !== last_ESTQ2_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[5] = ESTQ2_expected_prev[5];
	end
	if (
		( ESTQ2_expected_prev[6] !== 1'bx ) && ( ESTQ2_prev[6] !== ESTQ2_expected_prev[6] )
		&& ((ESTQ2_expected_prev[6] !== last_ESTQ2_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[6] = ESTQ2_expected_prev[6];
	end
	if (
		( ESTQ2_expected_prev[7] !== 1'bx ) && ( ESTQ2_prev[7] !== ESTQ2_expected_prev[7] )
		&& ((ESTQ2_expected_prev[7] !== last_ESTQ2_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[7] = ESTQ2_expected_prev[7];
	end
	if (
		( ESTQ2_expected_prev[8] !== 1'bx ) && ( ESTQ2_prev[8] !== ESTQ2_expected_prev[8] )
		&& ((ESTQ2_expected_prev[8] !== last_ESTQ2_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ2_expected_prev);
		$display ("     Real value = %b", ESTQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTQ2_exp[8] = ESTQ2_expected_prev[8];
	end
	if (
		( ESTQ3_expected_prev[0] !== 1'bx ) && ( ESTQ3_prev[0] !== ESTQ3_expected_prev[0] )
		&& ((ESTQ3_expected_prev[0] !== last_ESTQ3_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[0] = ESTQ3_expected_prev[0];
	end
	if (
		( ESTQ3_expected_prev[1] !== 1'bx ) && ( ESTQ3_prev[1] !== ESTQ3_expected_prev[1] )
		&& ((ESTQ3_expected_prev[1] !== last_ESTQ3_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[1] = ESTQ3_expected_prev[1];
	end
	if (
		( ESTQ3_expected_prev[2] !== 1'bx ) && ( ESTQ3_prev[2] !== ESTQ3_expected_prev[2] )
		&& ((ESTQ3_expected_prev[2] !== last_ESTQ3_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[2] = ESTQ3_expected_prev[2];
	end
	if (
		( ESTQ3_expected_prev[3] !== 1'bx ) && ( ESTQ3_prev[3] !== ESTQ3_expected_prev[3] )
		&& ((ESTQ3_expected_prev[3] !== last_ESTQ3_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[3] = ESTQ3_expected_prev[3];
	end
	if (
		( ESTQ3_expected_prev[4] !== 1'bx ) && ( ESTQ3_prev[4] !== ESTQ3_expected_prev[4] )
		&& ((ESTQ3_expected_prev[4] !== last_ESTQ3_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[4] = ESTQ3_expected_prev[4];
	end
	if (
		( ESTQ3_expected_prev[5] !== 1'bx ) && ( ESTQ3_prev[5] !== ESTQ3_expected_prev[5] )
		&& ((ESTQ3_expected_prev[5] !== last_ESTQ3_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[5] = ESTQ3_expected_prev[5];
	end
	if (
		( ESTQ3_expected_prev[6] !== 1'bx ) && ( ESTQ3_prev[6] !== ESTQ3_expected_prev[6] )
		&& ((ESTQ3_expected_prev[6] !== last_ESTQ3_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[6] = ESTQ3_expected_prev[6];
	end
	if (
		( ESTQ3_expected_prev[7] !== 1'bx ) && ( ESTQ3_prev[7] !== ESTQ3_expected_prev[7] )
		&& ((ESTQ3_expected_prev[7] !== last_ESTQ3_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[7] = ESTQ3_expected_prev[7];
	end
	if (
		( ESTQ3_expected_prev[8] !== 1'bx ) && ( ESTQ3_prev[8] !== ESTQ3_expected_prev[8] )
		&& ((ESTQ3_expected_prev[8] !== last_ESTQ3_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ3_expected_prev);
		$display ("     Real value = %b", ESTQ3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ESTQ3_exp[8] = ESTQ3_expected_prev[8];
	end
	if (
		( ESTQ4_expected_prev[0] !== 1'bx ) && ( ESTQ4_prev[0] !== ESTQ4_expected_prev[0] )
		&& ((ESTQ4_expected_prev[0] !== last_ESTQ4_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[0] = ESTQ4_expected_prev[0];
	end
	if (
		( ESTQ4_expected_prev[1] !== 1'bx ) && ( ESTQ4_prev[1] !== ESTQ4_expected_prev[1] )
		&& ((ESTQ4_expected_prev[1] !== last_ESTQ4_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[1] = ESTQ4_expected_prev[1];
	end
	if (
		( ESTQ4_expected_prev[2] !== 1'bx ) && ( ESTQ4_prev[2] !== ESTQ4_expected_prev[2] )
		&& ((ESTQ4_expected_prev[2] !== last_ESTQ4_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[2] = ESTQ4_expected_prev[2];
	end
	if (
		( ESTQ4_expected_prev[3] !== 1'bx ) && ( ESTQ4_prev[3] !== ESTQ4_expected_prev[3] )
		&& ((ESTQ4_expected_prev[3] !== last_ESTQ4_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[3] = ESTQ4_expected_prev[3];
	end
	if (
		( ESTQ4_expected_prev[4] !== 1'bx ) && ( ESTQ4_prev[4] !== ESTQ4_expected_prev[4] )
		&& ((ESTQ4_expected_prev[4] !== last_ESTQ4_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[4] = ESTQ4_expected_prev[4];
	end
	if (
		( ESTQ4_expected_prev[5] !== 1'bx ) && ( ESTQ4_prev[5] !== ESTQ4_expected_prev[5] )
		&& ((ESTQ4_expected_prev[5] !== last_ESTQ4_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[5] = ESTQ4_expected_prev[5];
	end
	if (
		( ESTQ4_expected_prev[6] !== 1'bx ) && ( ESTQ4_prev[6] !== ESTQ4_expected_prev[6] )
		&& ((ESTQ4_expected_prev[6] !== last_ESTQ4_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[6] = ESTQ4_expected_prev[6];
	end
	if (
		( ESTQ4_expected_prev[7] !== 1'bx ) && ( ESTQ4_prev[7] !== ESTQ4_expected_prev[7] )
		&& ((ESTQ4_expected_prev[7] !== last_ESTQ4_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[7] = ESTQ4_expected_prev[7];
	end
	if (
		( ESTQ4_expected_prev[8] !== 1'bx ) && ( ESTQ4_prev[8] !== ESTQ4_expected_prev[8] )
		&& ((ESTQ4_expected_prev[8] !== last_ESTQ4_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ4_expected_prev);
		$display ("     Real value = %b", ESTQ4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ESTQ4_exp[8] = ESTQ4_expected_prev[8];
	end
	if (
		( ESTQ5_expected_prev[0] !== 1'bx ) && ( ESTQ5_prev[0] !== ESTQ5_expected_prev[0] )
		&& ((ESTQ5_expected_prev[0] !== last_ESTQ5_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[0] = ESTQ5_expected_prev[0];
	end
	if (
		( ESTQ5_expected_prev[1] !== 1'bx ) && ( ESTQ5_prev[1] !== ESTQ5_expected_prev[1] )
		&& ((ESTQ5_expected_prev[1] !== last_ESTQ5_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[1] = ESTQ5_expected_prev[1];
	end
	if (
		( ESTQ5_expected_prev[2] !== 1'bx ) && ( ESTQ5_prev[2] !== ESTQ5_expected_prev[2] )
		&& ((ESTQ5_expected_prev[2] !== last_ESTQ5_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[2] = ESTQ5_expected_prev[2];
	end
	if (
		( ESTQ5_expected_prev[3] !== 1'bx ) && ( ESTQ5_prev[3] !== ESTQ5_expected_prev[3] )
		&& ((ESTQ5_expected_prev[3] !== last_ESTQ5_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[3] = ESTQ5_expected_prev[3];
	end
	if (
		( ESTQ5_expected_prev[4] !== 1'bx ) && ( ESTQ5_prev[4] !== ESTQ5_expected_prev[4] )
		&& ((ESTQ5_expected_prev[4] !== last_ESTQ5_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[4] = ESTQ5_expected_prev[4];
	end
	if (
		( ESTQ5_expected_prev[5] !== 1'bx ) && ( ESTQ5_prev[5] !== ESTQ5_expected_prev[5] )
		&& ((ESTQ5_expected_prev[5] !== last_ESTQ5_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[5] = ESTQ5_expected_prev[5];
	end
	if (
		( ESTQ5_expected_prev[6] !== 1'bx ) && ( ESTQ5_prev[6] !== ESTQ5_expected_prev[6] )
		&& ((ESTQ5_expected_prev[6] !== last_ESTQ5_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[6] = ESTQ5_expected_prev[6];
	end
	if (
		( ESTQ5_expected_prev[7] !== 1'bx ) && ( ESTQ5_prev[7] !== ESTQ5_expected_prev[7] )
		&& ((ESTQ5_expected_prev[7] !== last_ESTQ5_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[7] = ESTQ5_expected_prev[7];
	end
	if (
		( ESTQ5_expected_prev[8] !== 1'bx ) && ( ESTQ5_prev[8] !== ESTQ5_expected_prev[8] )
		&& ((ESTQ5_expected_prev[8] !== last_ESTQ5_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTQ5[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTQ5_expected_prev);
		$display ("     Real value = %b", ESTQ5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ESTQ5_exp[8] = ESTQ5_expected_prev[8];
	end
	if (
		( hexDisplay_centena_expected_prev[0] !== 1'bx ) && ( hexDisplay_centena_prev[0] !== hexDisplay_centena_expected_prev[0] )
		&& ((hexDisplay_centena_expected_prev[0] !== last_hexDisplay_centena_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[0] = hexDisplay_centena_expected_prev[0];
	end
	if (
		( hexDisplay_centena_expected_prev[1] !== 1'bx ) && ( hexDisplay_centena_prev[1] !== hexDisplay_centena_expected_prev[1] )
		&& ((hexDisplay_centena_expected_prev[1] !== last_hexDisplay_centena_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[1] = hexDisplay_centena_expected_prev[1];
	end
	if (
		( hexDisplay_centena_expected_prev[2] !== 1'bx ) && ( hexDisplay_centena_prev[2] !== hexDisplay_centena_expected_prev[2] )
		&& ((hexDisplay_centena_expected_prev[2] !== last_hexDisplay_centena_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[2] = hexDisplay_centena_expected_prev[2];
	end
	if (
		( hexDisplay_centena_expected_prev[3] !== 1'bx ) && ( hexDisplay_centena_prev[3] !== hexDisplay_centena_expected_prev[3] )
		&& ((hexDisplay_centena_expected_prev[3] !== last_hexDisplay_centena_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[3] = hexDisplay_centena_expected_prev[3];
	end
	if (
		( hexDisplay_centena_expected_prev[4] !== 1'bx ) && ( hexDisplay_centena_prev[4] !== hexDisplay_centena_expected_prev[4] )
		&& ((hexDisplay_centena_expected_prev[4] !== last_hexDisplay_centena_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[4] = hexDisplay_centena_expected_prev[4];
	end
	if (
		( hexDisplay_centena_expected_prev[5] !== 1'bx ) && ( hexDisplay_centena_prev[5] !== hexDisplay_centena_expected_prev[5] )
		&& ((hexDisplay_centena_expected_prev[5] !== last_hexDisplay_centena_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[5] = hexDisplay_centena_expected_prev[5];
	end
	if (
		( hexDisplay_centena_expected_prev[6] !== 1'bx ) && ( hexDisplay_centena_prev[6] !== hexDisplay_centena_expected_prev[6] )
		&& ((hexDisplay_centena_expected_prev[6] !== last_hexDisplay_centena_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_centena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_centena_expected_prev);
		$display ("     Real value = %b", hexDisplay_centena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_hexDisplay_centena_exp[6] = hexDisplay_centena_expected_prev[6];
	end
	if (
		( hexDisplay_choice_expected_prev[0] !== 1'bx ) && ( hexDisplay_choice_prev[0] !== hexDisplay_choice_expected_prev[0] )
		&& ((hexDisplay_choice_expected_prev[0] !== last_hexDisplay_choice_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[0] = hexDisplay_choice_expected_prev[0];
	end
	if (
		( hexDisplay_choice_expected_prev[1] !== 1'bx ) && ( hexDisplay_choice_prev[1] !== hexDisplay_choice_expected_prev[1] )
		&& ((hexDisplay_choice_expected_prev[1] !== last_hexDisplay_choice_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[1] = hexDisplay_choice_expected_prev[1];
	end
	if (
		( hexDisplay_choice_expected_prev[2] !== 1'bx ) && ( hexDisplay_choice_prev[2] !== hexDisplay_choice_expected_prev[2] )
		&& ((hexDisplay_choice_expected_prev[2] !== last_hexDisplay_choice_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[2] = hexDisplay_choice_expected_prev[2];
	end
	if (
		( hexDisplay_choice_expected_prev[3] !== 1'bx ) && ( hexDisplay_choice_prev[3] !== hexDisplay_choice_expected_prev[3] )
		&& ((hexDisplay_choice_expected_prev[3] !== last_hexDisplay_choice_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[3] = hexDisplay_choice_expected_prev[3];
	end
	if (
		( hexDisplay_choice_expected_prev[4] !== 1'bx ) && ( hexDisplay_choice_prev[4] !== hexDisplay_choice_expected_prev[4] )
		&& ((hexDisplay_choice_expected_prev[4] !== last_hexDisplay_choice_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[4] = hexDisplay_choice_expected_prev[4];
	end
	if (
		( hexDisplay_choice_expected_prev[5] !== 1'bx ) && ( hexDisplay_choice_prev[5] !== hexDisplay_choice_expected_prev[5] )
		&& ((hexDisplay_choice_expected_prev[5] !== last_hexDisplay_choice_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[5] = hexDisplay_choice_expected_prev[5];
	end
	if (
		( hexDisplay_choice_expected_prev[6] !== 1'bx ) && ( hexDisplay_choice_prev[6] !== hexDisplay_choice_expected_prev[6] )
		&& ((hexDisplay_choice_expected_prev[6] !== last_hexDisplay_choice_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_choice[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_choice_expected_prev);
		$display ("     Real value = %b", hexDisplay_choice_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_hexDisplay_choice_exp[6] = hexDisplay_choice_expected_prev[6];
	end
	if (
		( hexDisplay_dezena_expected_prev[0] !== 1'bx ) && ( hexDisplay_dezena_prev[0] !== hexDisplay_dezena_expected_prev[0] )
		&& ((hexDisplay_dezena_expected_prev[0] !== last_hexDisplay_dezena_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[0] = hexDisplay_dezena_expected_prev[0];
	end
	if (
		( hexDisplay_dezena_expected_prev[1] !== 1'bx ) && ( hexDisplay_dezena_prev[1] !== hexDisplay_dezena_expected_prev[1] )
		&& ((hexDisplay_dezena_expected_prev[1] !== last_hexDisplay_dezena_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[1] = hexDisplay_dezena_expected_prev[1];
	end
	if (
		( hexDisplay_dezena_expected_prev[2] !== 1'bx ) && ( hexDisplay_dezena_prev[2] !== hexDisplay_dezena_expected_prev[2] )
		&& ((hexDisplay_dezena_expected_prev[2] !== last_hexDisplay_dezena_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[2] = hexDisplay_dezena_expected_prev[2];
	end
	if (
		( hexDisplay_dezena_expected_prev[3] !== 1'bx ) && ( hexDisplay_dezena_prev[3] !== hexDisplay_dezena_expected_prev[3] )
		&& ((hexDisplay_dezena_expected_prev[3] !== last_hexDisplay_dezena_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[3] = hexDisplay_dezena_expected_prev[3];
	end
	if (
		( hexDisplay_dezena_expected_prev[4] !== 1'bx ) && ( hexDisplay_dezena_prev[4] !== hexDisplay_dezena_expected_prev[4] )
		&& ((hexDisplay_dezena_expected_prev[4] !== last_hexDisplay_dezena_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[4] = hexDisplay_dezena_expected_prev[4];
	end
	if (
		( hexDisplay_dezena_expected_prev[5] !== 1'bx ) && ( hexDisplay_dezena_prev[5] !== hexDisplay_dezena_expected_prev[5] )
		&& ((hexDisplay_dezena_expected_prev[5] !== last_hexDisplay_dezena_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[5] = hexDisplay_dezena_expected_prev[5];
	end
	if (
		( hexDisplay_dezena_expected_prev[6] !== 1'bx ) && ( hexDisplay_dezena_prev[6] !== hexDisplay_dezena_expected_prev[6] )
		&& ((hexDisplay_dezena_expected_prev[6] !== last_hexDisplay_dezena_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_dezena[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_dezena_expected_prev);
		$display ("     Real value = %b", hexDisplay_dezena_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_hexDisplay_dezena_exp[6] = hexDisplay_dezena_expected_prev[6];
	end
	if (
		( hexDisplay_unidade_expected_prev[0] !== 1'bx ) && ( hexDisplay_unidade_prev[0] !== hexDisplay_unidade_expected_prev[0] )
		&& ((hexDisplay_unidade_expected_prev[0] !== last_hexDisplay_unidade_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[0] = hexDisplay_unidade_expected_prev[0];
	end
	if (
		( hexDisplay_unidade_expected_prev[1] !== 1'bx ) && ( hexDisplay_unidade_prev[1] !== hexDisplay_unidade_expected_prev[1] )
		&& ((hexDisplay_unidade_expected_prev[1] !== last_hexDisplay_unidade_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[1] = hexDisplay_unidade_expected_prev[1];
	end
	if (
		( hexDisplay_unidade_expected_prev[2] !== 1'bx ) && ( hexDisplay_unidade_prev[2] !== hexDisplay_unidade_expected_prev[2] )
		&& ((hexDisplay_unidade_expected_prev[2] !== last_hexDisplay_unidade_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[2] = hexDisplay_unidade_expected_prev[2];
	end
	if (
		( hexDisplay_unidade_expected_prev[3] !== 1'bx ) && ( hexDisplay_unidade_prev[3] !== hexDisplay_unidade_expected_prev[3] )
		&& ((hexDisplay_unidade_expected_prev[3] !== last_hexDisplay_unidade_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[3] = hexDisplay_unidade_expected_prev[3];
	end
	if (
		( hexDisplay_unidade_expected_prev[4] !== 1'bx ) && ( hexDisplay_unidade_prev[4] !== hexDisplay_unidade_expected_prev[4] )
		&& ((hexDisplay_unidade_expected_prev[4] !== last_hexDisplay_unidade_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[4] = hexDisplay_unidade_expected_prev[4];
	end
	if (
		( hexDisplay_unidade_expected_prev[5] !== 1'bx ) && ( hexDisplay_unidade_prev[5] !== hexDisplay_unidade_expected_prev[5] )
		&& ((hexDisplay_unidade_expected_prev[5] !== last_hexDisplay_unidade_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[5] = hexDisplay_unidade_expected_prev[5];
	end
	if (
		( hexDisplay_unidade_expected_prev[6] !== 1'bx ) && ( hexDisplay_unidade_prev[6] !== hexDisplay_unidade_expected_prev[6] )
		&& ((hexDisplay_unidade_expected_prev[6] !== last_hexDisplay_unidade_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hexDisplay_unidade[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hexDisplay_unidade_expected_prev);
		$display ("     Real value = %b", hexDisplay_unidade_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_hexDisplay_unidade_exp[6] = hexDisplay_unidade_expected_prev[6];
	end
	if (
		( P_expected_prev[0] !== 1'bx ) && ( P_prev[0] !== P_expected_prev[0] )
		&& ((P_expected_prev[0] !== last_P_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[0] = P_expected_prev[0];
	end
	if (
		( P_expected_prev[1] !== 1'bx ) && ( P_prev[1] !== P_expected_prev[1] )
		&& ((P_expected_prev[1] !== last_P_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[1] = P_expected_prev[1];
	end
	if (
		( P_expected_prev[2] !== 1'bx ) && ( P_prev[2] !== P_expected_prev[2] )
		&& ((P_expected_prev[2] !== last_P_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[2] = P_expected_prev[2];
	end
	if (
		( P_expected_prev[3] !== 1'bx ) && ( P_prev[3] !== P_expected_prev[3] )
		&& ((P_expected_prev[3] !== last_P_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[3] = P_expected_prev[3];
	end
	if (
		( P_expected_prev[4] !== 1'bx ) && ( P_prev[4] !== P_expected_prev[4] )
		&& ((P_expected_prev[4] !== last_P_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[4] = P_expected_prev[4];
	end
	if (
		( P_expected_prev[5] !== 1'bx ) && ( P_prev[5] !== P_expected_prev[5] )
		&& ((P_expected_prev[5] !== last_P_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[5] = P_expected_prev[5];
	end
	if (
		( P_expected_prev[6] !== 1'bx ) && ( P_prev[6] !== P_expected_prev[6] )
		&& ((P_expected_prev[6] !== last_P_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[6] = P_expected_prev[6];
	end
	if (
		( P_expected_prev[7] !== 1'bx ) && ( P_prev[7] !== P_expected_prev[7] )
		&& ((P_expected_prev[7] !== last_P_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[7] = P_expected_prev[7];
	end
	if (
		( P_expected_prev[8] !== 1'bx ) && ( P_prev[8] !== P_expected_prev[8] )
		&& ((P_expected_prev[8] !== last_P_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_expected_prev);
		$display ("     Real value = %b", P_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_P_exp[8] = P_expected_prev[8];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#30000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module vending_machine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg cancel_purchase;
reg [2:0] choice;
reg clk;
reg coin_confirm_signal;
reg dispense_signal;
reg nRST;
reg [2:0] V_input;
// wires                                               
wire [2:0] D1;
wire [2:0] D2;
wire [2:0] D3;
wire [2:0] D4;
wire [2:0] D5;
wire [8:0] E;
wire [8:0] ESTQ1;
wire [8:0] ESTQ2;
wire [8:0] ESTQ3;
wire [8:0] ESTQ4;
wire [8:0] ESTQ5;
wire [6:0] hexDisplay_centena;
wire [6:0] hexDisplay_choice;
wire [6:0] hexDisplay_dezena;
wire [6:0] hexDisplay_unidade;
wire [8:0] P;

wire sampler;                             

// assign statements (if any)                          
vending_machine i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.cancel_purchase(cancel_purchase),
	.choice(choice),
	.clk(clk),
	.coin_confirm_signal(coin_confirm_signal),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.dispense_signal(dispense_signal),
	.E(E),
	.ESTQ1(ESTQ1),
	.ESTQ2(ESTQ2),
	.ESTQ3(ESTQ3),
	.ESTQ4(ESTQ4),
	.ESTQ5(ESTQ5),
	.hexDisplay_centena(hexDisplay_centena),
	.hexDisplay_choice(hexDisplay_choice),
	.hexDisplay_dezena(hexDisplay_dezena),
	.hexDisplay_unidade(hexDisplay_unidade),
	.nRST(nRST),
	.P(P),
	.V_input(V_input)
);

// C
initial
begin
	C = 1'b1;
end 

// clk
initial
begin
	repeat(588)
	begin
		clk = 1'b0;
		clk = #25500 1'b1;
		# 25500;
	end
	clk = 1'b0;
end 
// choice[ 2 ]
initial
begin
	choice[2] = 1'b0;
end 
// choice[ 1 ]
initial
begin
	choice[1] = 1'b0;
	choice[1] = #14400000 1'b1;
	choice[1] = #10560000 1'b0;
end 
// choice[ 0 ]
initial
begin
	choice[0] = 1'b1;
	choice[0] = #9999000 1'b0;
end 

// nRST
initial
begin
	nRST = 1'b1;
	nRST = #9999000 1'b0;
	nRST = #4401000 1'b1;
	nRST = #10560000 1'b0;
end 

// cancel_purchase
initial
begin
	cancel_purchase = 1'b0;
end 

// V_input[2]
initial
begin
	V_input[2] = 1'b1;
	V_input[2] = #8800000 1'b0;
end 

// V_input[1]
initial
begin
	V_input[1] = 1'b0;
	V_input[1] = #14400000 1'b1;
	V_input[1] = #9280000 1'b0;
end 

// V_input[0]
initial
begin
	V_input[0] = 1'b0;
	V_input[0] = #14400000 1'b1;
	V_input[0] = #9280000 1'b0;
end 

// coin_confirm_signal
initial
begin
	coin_confirm_signal = 1'b1;
	coin_confirm_signal = #3040000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #1040000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #1040000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #1040000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #800000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #8800000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #800000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #1120000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #1360000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #720000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #960000 1'b0;
	coin_confirm_signal = #80000 1'b1;
	coin_confirm_signal = #4320000 1'b0;
end 

// dispense_signal
initial
begin
	dispense_signal = 1'b1;
	dispense_signal = #8560000 1'b0;
	dispense_signal = #80000 1'b1;
	dispense_signal = #14800000 1'b0;
	dispense_signal = #80000 1'b1;
	dispense_signal = #2400000 1'b0;
end 

vending_machine_vlg_sample_tst tb_sample (
	.C(C),
	.cancel_purchase(cancel_purchase),
	.choice(choice),
	.clk(clk),
	.coin_confirm_signal(coin_confirm_signal),
	.dispense_signal(dispense_signal),
	.nRST(nRST),
	.V_input(V_input),
	.sampler_tx(sampler)
);

vending_machine_vlg_check_tst tb_out(
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.E(E),
	.ESTQ1(ESTQ1),
	.ESTQ2(ESTQ2),
	.ESTQ3(ESTQ3),
	.ESTQ4(ESTQ4),
	.ESTQ5(ESTQ5),
	.hexDisplay_centena(hexDisplay_centena),
	.hexDisplay_choice(hexDisplay_choice),
	.hexDisplay_dezena(hexDisplay_dezena),
	.hexDisplay_unidade(hexDisplay_unidade),
	.P(P),
	.sampler_rx(sampler)
);
endmodule

